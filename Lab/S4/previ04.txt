Previ:

1-
argc: nombre de parametres d'entrada a l'hora d'executar el programa.
argv: vector que conté els parametres d'entrada

2-
tradueix un vector de caracters numerics a un integer.

3-
| | | |c|
|   k   |
|  *m   |

4-

Bloc activació Insertar
_________
|  %edi |
|  %esi |
|  %ebx |
|   i   |
|   j   |
|  lug  |
|  %ebp |
|  @RET |
|  @v   |
| | | |c|    #X
|   k   |
|  *m   |
_________

Bloc activació Assignar
_________
|  %ebp |
|  @RET |
|  @v   |
| | | |c|    #X
|   k   |
|  *m   |
___pos___

5-
Bloc activació Main
_________
|    a  |
|    b  |
|    n  |
| trobat|
| | | |c|   #X
|   k   |
|  *m   |
| | | |c|   #Y
|   k   |
|  *m   |
| | | |c|   #Z
|   k   |
|  *m   |
|  v[0] |
|  ...  |
| v[29] | (És una struct -> ocupa 12)
| %ebp  |
| @RET  | 
| argc  |
| @argv |
_________

6-
Bloc activació SencillaSub
_________
  %ebp    0
  @RET    4
| | | |c|   #a
|   k   |
|  *m   |
| | | |b|
_________

        pushl %ebp
        movl %esp, %ebp

if:     movb 20(%ebp), %dl      #b
        cmpb 8(%ebp), %dl
        jne else

        movl $0, %eax
        jmp fi_if

else:   movl 16(%ebp), %eax
        movl (%eax), %eax

fi_if:  addl 12(%ebp), %eax

        movl %ebp, %esp
        popl %ebp
        ret

7-
Bloc activació LammSencilla
_________
  %ebp      0
  @RET      4
| | | |c|   #x
|   k   |
|  *m   |
| | | |y|
_________

        pushl %ebp
        movl %esp, %ebp

        pushl 8(%ebp)

        pushl 16(%ebp)
        pushl 12(%ebp)
        pushl 8(%ebp)

        call SencillaSub
        addl $16, %esp

        movl 16(%ebp), %ecx
        movl %eax, (%ecx)
        movl 12(%ebp), %eax

        movl %ebp, %esp
        popl %ebp
        ret
