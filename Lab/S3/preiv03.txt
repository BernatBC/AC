Previ:

____________________________________________________________
                        Versió Bernat
____________________________________________________________
1- Instruccions: 5 + 10*9 + 2 = 97

        leal %eax, i
        movl $0, (%eax)
        leal %ebx, suma
        movl $0, (%ebx)
        leal %ecx, Matriz

for:    cmpl $10, (%eax)
        jge fi_for

        imul $40, (%eax), %edx
        movl (%ebx), %ebx
        addl 8(%ecx, %edx), %ebx
        leal %edx, suma
        movl %ebx, (%edx)

        incl (%eax)
        jmp for
fi_for:




2- Instruccions: 5 + 10*7 + 2 = 77

        leal %eax, i
        movl $0, (%eax)
        leal %ebx, suma
        movl $0, (%ebx)
        leal %ecx, Matriz

for:    cmpl $400, (%eax)
        jge fi_for

        movl (%ebx), %edx
        addl 8(%ecx, %eax), %edx
        movl %edx, (%ebx)

        addl $40, %eax
        jmp for
fi_for:




3-
        leal %eax, i
        movl $0, (%eax)
        leal %ebx, j
        movl $0, (%ebx)
        leal %ecx, ResFila
        movl $1, (%ecx)

for:    cmpl $10, (%eax)
        jge fi_for

while:  leal %edx, Matriz
        imul $40, %eax, %ecx
        addl %ecx, %edx
        movl %edx, (%edx, %ebx, 4)
        cmpl $0, %edx
        je fi_while

if:     cmpl $100, %edx
        jle fi_if

        leal %ecx, ResFila
        subl %edx, (%ecx, %eax, 4)
fi_if:
        incl (%ebx)
        jmp while
fi_while:

        incl (%eax)
        movl $0, (%ebx)
        movl $1, (%ecx, %eax, 4)
        jmp for
fi_for:


____________________________________________________________
        Versió Miquel (No us en fieu sobretot del 3)
____________________________________________________________

1.
      movl $0, %eax               // i = 0
      movl $0, %ebx               // suma = 0
      leal %ecx, Matriz          // %ecx = &Matriz

for:  cmpl $10, %eax
      jge fi_for                  // jmp if (i >= 10)

      imul $10, %eax, %edx        // %edx = i*10 (avançem files)
      addl 8(%ecx, %edx, 4), %ebx // suma += M[i][2]
      incl %eax                   // ++i
      jmp for
fi_for:
      leal %eax, suma
      movl %ebx, (%eax)



2.
      movl $0, %eax               // i = 0
      movl $0, %ebx               // suma = 0
      movl $Matriz, %ecx          // %ecx = &Matriz
      movl %ecx, %edx

for:  cmpl $100, %edx
      jge fi_for

      addl 8(%ecx, %edx, 4), %ebx // suma += M[i][2]
      addl $10, %edx              // avançem 1 fila (sino tinguessim l'escalar hauriem de fer $40)
      jmp for
fi_for:
      leal %eax, suma
      movl %ebx, (%eax)

La versió no seqüencial executa 67 instruccions i la seqüencial 58





3.
      movl $Matrix, %ecx          // %ecx = &Matrix
      movl $ResFila, %edx         // %edx = &ResFila

      movb $0, %ah                // i = 0
      movb $0, %al                // j = 0
      movl $1, (%edx)             // ResFila[0] = 1

for:  cmpl  $10, %eax
      jge fi_for

while:
      imul $10, %ah, %ebx         // avançem files
      addl %al, %ebx              // avançem columnes
      cmpl $0, (%ecx,%ebx, 4)     // if (M[i][j] != 0)
      je fi_while                // jmp fi_while

if:   imul $10, %ah, %ebx         // avançem files
      addl %al, %ebx              // avançem columnes
      cmpl $100, (%ecx, %ebx, 4)  // if (M[i][j] > 100)
      jle fi_if                   // jmp fi_if

      movl (%ecx, %ebx, 4), %ebx  // %ebx = M[i][j]
      subl %ebx, (%edx,%ah,4)     // ResFila[i] -= %ebx

fi_if:
      incb %al                    // ++j
      jmp while
fi_while:
      incb %ah                    // ++i
      movb $0, %al                // j = 0
      movl $1, (%edx,%ah,4)       // ResFila[i] = 1
      jmp for
fi_for:
